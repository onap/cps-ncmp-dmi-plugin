components:
  schemas:
    ErrorMessage:
      type: object
      title: Error
      properties:
        status:
          type: string
        message:
          type: string
        details:
          type: string

    CmHandles:
      type: object
      properties:
        cmHandles:
          type: array
          items:
            type: string

    DmiModuleReadRequestBody:
      type: object
      properties:
        operation:
          type: string
          enum: [read]
        dataType:
          type: string
        data:
          type: object
          properties:
            modules:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  revision:
                    type: string
        cmHandleProperties:
          $ref: '#/components/schemas/cmHandleProperties'

    ModuleSet:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: object
            properties:
              moduleName:
                type: string
              revision:
                type: string
              namespace:
                type: string

    YangResources:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/YangResource'

    YangResource:
      properties:
        yangSource:
          type: string
        moduleName:
          type: string
        revision:
          type: string

    DataAccessReadRequest:
      type: object
      properties:
        operation:
          type: string
          enum: [ read ]
        cmHandleProperties:
          $ref: '#/components/schemas/cmHandleProperties'

    DataAccessWriteRequest:
      type: object
      properties:
        operation:
          type: string
          enum: [ create ]
        dataType:
          type: string
        data:
          type: string
        cmHandleProperties:
          $ref: '#/components/schemas/cmHandleProperties'

    cmHandleProperties:
      type: object
      additionalProperties:
        type: string
        example: {"prop1":"value1","prop2":"value2"}

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Ok:
      description: OK
      content:
        application/json:
          schema:
            type: object
    Created:
      description: Created
      content:
        text/plain:
          schema:
            type: string
    NoContent:
      description: No Content
      content: {}

  parameters:
    cmHandleInPath:
      name: cmHandle
      in: path
      description: The identifier for a network function, network element, subnetwork, or any other cm object by managed Network CM Proxy
      required: true
      schema:
        type: string

    resourceIdentifierInQuery:
      name: resourceIdentifier
      in: query
      description: Resource identifier to get/set the resource data
      required: true
      allowReserved: true
      schema:
        type: string

    acceptParamInHeader:
      name: accept
      in: header
      description: Accept parameter for response, if accept parameter is null, that means client can accept any format.
      schema:
        type: string
        enum: [ application/json, application/yang-data+json ]

    optionsParamInQuery:
      name: options
      in: query
      description: options parameter in query, it is mandatory to wrap key(s)=value(s) in parenthesis'()'.
      required: false
      schema:
        type: string
      allowReserved: true
      examples:
        sample1:
          value:
            options: (key1=value1,key2=value2)
        sample2:
          value:
            options: (key1=value1,key2=value1/value2)
        sample3:
          value:
            options: (key1=10,key2=value2,key3=[val31,val32])